// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(5)
            {
                { typeof(global::Data.Dummy[]), 0 },
                { typeof(global::System.Collections.Generic.List<global::Data.Dummy>), 1 },
                { typeof(global::Data.ArrayMeta), 2 },
                { typeof(global::Data.Dummy), 3 },
                { typeof(global::Data.ListMeta), 4 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::Data.Dummy>();
                case 1: return new global::MessagePack.Formatters.ListFormatter<global::Data.Dummy>();
                case 2: return new MessagePack.Formatters.Data.ArrayMetaFormatter();
                case 3: return new MessagePack.Formatters.Data.DummyFormatter();
                case 4: return new MessagePack.Formatters.Data.ListMetaFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Data
{
    public sealed class ArrayMetaFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ArrayMeta>
    {
        // Dummy
        private static global::System.ReadOnlySpan<byte> GetSpan_Dummy() => new byte[1 + 5] { 165, 68, 117, 109, 109, 121 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Data.ArrayMeta value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Dummy());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Data.Dummy[]>(formatterResolver).Serialize(ref writer, value.Dummy, options);
        }

        public global::Data.ArrayMeta Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Data.ArrayMeta();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 521526932804UL) { goto FAIL; }

                        reader.Skip();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DummyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.Dummy>
    {
        // Seed
        private static global::System.ReadOnlySpan<byte> GetSpan_Seed() => new byte[1 + 4] { 164, 83, 101, 101, 100 };
        // Value
        private static global::System.ReadOnlySpan<byte> GetSpan_Value() => new byte[1 + 5] { 165, 86, 97, 108, 117, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Data.Dummy value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Seed());
            writer.Write(value.Seed);
            writer.WriteRaw(GetSpan_Value());
            writer.Write(value.Value);
        }

        public global::Data.Dummy Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var __Seed__ = default(int);
            var __Value__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1684366675UL) { goto FAIL; }

                        __Seed__ = reader.ReadInt32();
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435761733974UL) { goto FAIL; }

                        __Value__ = reader.ReadSingle();
                        continue;

                }
            }

            var ____result = new global::Data.Dummy(__Seed__, __Value__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ListMetaFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ListMeta>
    {
        // Dummy
        private static global::System.ReadOnlySpan<byte> GetSpan_Dummy() => new byte[1 + 5] { 165, 68, 117, 109, 109, 121 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Data.ListMeta value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Dummy());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Data.Dummy>>(formatterResolver).Serialize(ref writer, value.Dummy, options);
        }

        public global::Data.ListMeta Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Data.ListMeta();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 521526932804UL) { goto FAIL; }

                        reader.Skip();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

