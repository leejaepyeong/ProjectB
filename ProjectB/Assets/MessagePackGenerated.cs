// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(12)
            {
                { typeof(global::Data.Dummy[]), 0 },
                { typeof(global::Data.SkillInfoData[]), 1 },
                { typeof(global::Data.StringText[]), 2 },
                { typeof(global::System.Collections.Generic.List<global::Data.Dummy>), 3 },
                { typeof(global::System.Collections.Generic.List<global::Data.SkillInfoData>), 4 },
                { typeof(global::System.Collections.Generic.List<global::Data.StringText>), 5 },
                { typeof(global::Data.ArrayMeta), 6 },
                { typeof(global::Data.Dummy), 7 },
                { typeof(global::Data.ListMeta), 8 },
                { typeof(global::Data.RuneInfoData), 9 },
                { typeof(global::Data.SkillInfoData), 10 },
                { typeof(global::Data.StringText), 11 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::Data.Dummy>();
                case 1: return new global::MessagePack.Formatters.ArrayFormatter<global::Data.SkillInfoData>();
                case 2: return new global::MessagePack.Formatters.ArrayFormatter<global::Data.StringText>();
                case 3: return new global::MessagePack.Formatters.ListFormatter<global::Data.Dummy>();
                case 4: return new global::MessagePack.Formatters.ListFormatter<global::Data.SkillInfoData>();
                case 5: return new global::MessagePack.Formatters.ListFormatter<global::Data.StringText>();
                case 6: return new MessagePack.Formatters.Data.ArrayMetaFormatter();
                case 7: return new MessagePack.Formatters.Data.DummyFormatter();
                case 8: return new MessagePack.Formatters.Data.ListMetaFormatter();
                case 9: return new MessagePack.Formatters.Data.RuneInfoDataFormatter();
                case 10: return new MessagePack.Formatters.Data.SkillInfoDataFormatter();
                case 11: return new MessagePack.Formatters.Data.StringTextFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Data
{
    public sealed class ArrayMetaFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ArrayMeta>
    {
        // Dummy
        private static global::System.ReadOnlySpan<byte> GetSpan_Dummy() => new byte[1 + 5] { 165, 68, 117, 109, 109, 121 };
        // StringText
        private static global::System.ReadOnlySpan<byte> GetSpan_StringText() => new byte[1 + 10] { 170, 83, 116, 114, 105, 110, 103, 84, 101, 120, 116 };
        // SkillInfoData
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillInfoData() => new byte[1 + 13] { 173, 83, 107, 105, 108, 108, 73, 110, 102, 111, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Data.ArrayMeta value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Dummy());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Data.Dummy[]>(formatterResolver).Serialize(ref writer, value.Dummy, options);
            writer.WriteRaw(GetSpan_StringText());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Data.StringText[]>(formatterResolver).Serialize(ref writer, value.StringText, options);
            writer.WriteRaw(GetSpan_SkillInfoData());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Data.SkillInfoData[]>(formatterResolver).Serialize(ref writer, value.SkillInfoData, options);
        }

        public global::Data.ArrayMeta Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Data.ArrayMeta();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 521526932804UL) { goto FAIL; }

                        reader.Skip();
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_StringText().Slice(1))) { goto FAIL; }

                        reader.Skip();
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SkillInfoData().Slice(1))) { goto FAIL; }

                        reader.Skip();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DummyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.Dummy>
    {
        // Seed
        private static global::System.ReadOnlySpan<byte> GetSpan_Seed() => new byte[1 + 4] { 164, 83, 101, 101, 100 };
        // Value
        private static global::System.ReadOnlySpan<byte> GetSpan_Value() => new byte[1 + 5] { 165, 86, 97, 108, 117, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Data.Dummy value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Seed());
            writer.Write(value.Seed);
            writer.WriteRaw(GetSpan_Value());
            writer.Write(value.Value);
        }

        public global::Data.Dummy Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var __Seed__ = default(int);
            var __Value__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1684366675UL) { goto FAIL; }

                        __Seed__ = reader.ReadInt32();
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435761733974UL) { goto FAIL; }

                        __Value__ = reader.ReadSingle();
                        continue;

                }
            }

            var ____result = new global::Data.Dummy(__Seed__, __Value__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ListMetaFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.ListMeta>
    {
        // Dummy
        private static global::System.ReadOnlySpan<byte> GetSpan_Dummy() => new byte[1 + 5] { 165, 68, 117, 109, 109, 121 };
        // StringText
        private static global::System.ReadOnlySpan<byte> GetSpan_StringText() => new byte[1 + 10] { 170, 83, 116, 114, 105, 110, 103, 84, 101, 120, 116 };
        // SkillInfoData
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillInfoData() => new byte[1 + 13] { 173, 83, 107, 105, 108, 108, 73, 110, 102, 111, 68, 97, 116, 97 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Data.ListMeta value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Dummy());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Data.Dummy>>(formatterResolver).Serialize(ref writer, value.Dummy, options);
            writer.WriteRaw(GetSpan_StringText());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Data.StringText>>(formatterResolver).Serialize(ref writer, value.StringText, options);
            writer.WriteRaw(GetSpan_SkillInfoData());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Data.SkillInfoData>>(formatterResolver).Serialize(ref writer, value.SkillInfoData, options);
        }

        public global::Data.ListMeta Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Data.ListMeta();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 521526932804UL) { goto FAIL; }

                        reader.Skip();
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_StringText().Slice(1))) { goto FAIL; }

                        reader.Skip();
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SkillInfoData().Slice(1))) { goto FAIL; }

                        reader.Skip();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RuneInfoDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.RuneInfoData>
    {
        // Seed
        private static global::System.ReadOnlySpan<byte> GetSpan_Seed() => new byte[1 + 4] { 164, 83, 101, 101, 100 };
        // GroupSeed
        private static global::System.ReadOnlySpan<byte> GetSpan_GroupSeed() => new byte[1 + 9] { 169, 71, 114, 111, 117, 112, 83, 101, 101, 100 };
        // NameIdx
        private static global::System.ReadOnlySpan<byte> GetSpan_NameIdx() => new byte[1 + 7] { 167, 78, 97, 109, 101, 73, 100, 120 };
        // DestIdx
        private static global::System.ReadOnlySpan<byte> GetSpan_DestIdx() => new byte[1 + 7] { 167, 68, 101, 115, 116, 73, 100, 120 };
        // RuneType1
        private static global::System.ReadOnlySpan<byte> GetSpan_RuneType1() => new byte[1 + 9] { 169, 82, 117, 110, 101, 84, 121, 112, 101, 49 };
        // RuneValue1
        private static global::System.ReadOnlySpan<byte> GetSpan_RuneValue1() => new byte[1 + 10] { 170, 82, 117, 110, 101, 86, 97, 108, 117, 101, 49 };
        // RuneType2
        private static global::System.ReadOnlySpan<byte> GetSpan_RuneType2() => new byte[1 + 9] { 169, 82, 117, 110, 101, 84, 121, 112, 101, 50 };
        // RuneValue2
        private static global::System.ReadOnlySpan<byte> GetSpan_RuneValue2() => new byte[1 + 10] { 170, 82, 117, 110, 101, 86, 97, 108, 117, 101, 50 };
        // RuneType3
        private static global::System.ReadOnlySpan<byte> GetSpan_RuneType3() => new byte[1 + 9] { 169, 82, 117, 110, 101, 84, 121, 112, 101, 51 };
        // RuneValue3
        private static global::System.ReadOnlySpan<byte> GetSpan_RuneValue3() => new byte[1 + 10] { 170, 82, 117, 110, 101, 86, 97, 108, 117, 101, 51 };
        // RuneType4
        private static global::System.ReadOnlySpan<byte> GetSpan_RuneType4() => new byte[1 + 9] { 169, 82, 117, 110, 101, 84, 121, 112, 101, 52 };
        // RuneValue4
        private static global::System.ReadOnlySpan<byte> GetSpan_RuneValue4() => new byte[1 + 10] { 170, 82, 117, 110, 101, 86, 97, 108, 117, 101, 52 };
        // RuneTag1
        private static global::System.ReadOnlySpan<byte> GetSpan_RuneTag1() => new byte[1 + 8] { 168, 82, 117, 110, 101, 84, 97, 103, 49 };
        // RuneTag2
        private static global::System.ReadOnlySpan<byte> GetSpan_RuneTag2() => new byte[1 + 8] { 168, 82, 117, 110, 101, 84, 97, 103, 50 };
        // RuneTag3
        private static global::System.ReadOnlySpan<byte> GetSpan_RuneTag3() => new byte[1 + 8] { 168, 82, 117, 110, 101, 84, 97, 103, 51 };
        // RuneTag4
        private static global::System.ReadOnlySpan<byte> GetSpan_RuneTag4() => new byte[1 + 8] { 168, 82, 117, 110, 101, 84, 97, 103, 52 };
        // RuneTag5
        private static global::System.ReadOnlySpan<byte> GetSpan_RuneTag5() => new byte[1 + 8] { 168, 82, 117, 110, 101, 84, 97, 103, 53 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Data.RuneInfoData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(17);
            writer.WriteRaw(GetSpan_Seed());
            writer.Write(value.Seed);
            writer.WriteRaw(GetSpan_GroupSeed());
            writer.Write(value.GroupSeed);
            writer.WriteRaw(GetSpan_NameIdx());
            writer.Write(value.NameIdx);
            writer.WriteRaw(GetSpan_DestIdx());
            writer.Write(value.DestIdx);
            writer.WriteRaw(GetSpan_RuneType1());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RuneType1, options);
            writer.WriteRaw(GetSpan_RuneValue1());
            writer.Write(value.RuneValue1);
            writer.WriteRaw(GetSpan_RuneType2());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RuneType2, options);
            writer.WriteRaw(GetSpan_RuneValue2());
            writer.Write(value.RuneValue2);
            writer.WriteRaw(GetSpan_RuneType3());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RuneType3, options);
            writer.WriteRaw(GetSpan_RuneValue3());
            writer.Write(value.RuneValue3);
            writer.WriteRaw(GetSpan_RuneType4());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RuneType4, options);
            writer.WriteRaw(GetSpan_RuneValue4());
            writer.Write(value.RuneValue4);
            writer.WriteRaw(GetSpan_RuneTag1());
            writer.Write(value.RuneTag1);
            writer.WriteRaw(GetSpan_RuneTag2());
            writer.Write(value.RuneTag2);
            writer.WriteRaw(GetSpan_RuneTag3());
            writer.Write(value.RuneTag3);
            writer.WriteRaw(GetSpan_RuneTag4());
            writer.Write(value.RuneTag4);
            writer.WriteRaw(GetSpan_RuneTag5());
            writer.Write(value.RuneTag5);
        }

        public global::Data.RuneInfoData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Seed__ = default(int);
            var __GroupSeed__ = default(int);
            var __NameIdx__ = default(int);
            var __DestIdx__ = default(int);
            var __RuneType1__ = default(string);
            var __RuneValue1__ = default(float);
            var __RuneType2__ = default(string);
            var __RuneValue2__ = default(float);
            var __RuneType3__ = default(string);
            var __RuneValue3__ = default(float);
            var __RuneType4__ = default(string);
            var __RuneValue4__ = default(float);
            var __RuneTag1__ = default(int);
            var __RuneTag2__ = default(int);
            var __RuneTag3__ = default(int);
            var __RuneTag4__ = default(int);
            var __RuneTag5__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1684366675UL) { goto FAIL; }

                        __Seed__ = reader.ReadInt32();
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7306337712950178375UL:
                                if (stringKey[0] != 100) { goto FAIL; }

                                __GroupSeed__ = reader.ReadInt32();
                                continue;

                            case 7309475598608266578UL:
                                switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                                {
                                    default: goto FAIL;
                                    case 49UL:
                                        __RuneType1__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                        continue;
                                    case 50UL:
                                        __RuneType2__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                        continue;
                                    case 51UL:
                                        __RuneType3__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                        continue;
                                    case 52UL:
                                        __RuneType4__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                        continue;
                                }

                        }
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 33887263602336078UL:
                                __NameIdx__ = reader.ReadInt32();
                                continue;
                            case 33887263854388548UL:
                                __DestIdx__ = reader.ReadInt32();
                                continue;
                        }
                    case 10:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8461244823619138898UL:
                                switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                                {
                                    default: goto FAIL;
                                    case 12645UL:
                                        __RuneValue1__ = reader.ReadSingle();
                                        continue;
                                    case 12901UL:
                                        __RuneValue2__ = reader.ReadSingle();
                                        continue;
                                    case 13157UL:
                                        __RuneValue3__ = reader.ReadSingle();
                                        continue;
                                    case 13413UL:
                                        __RuneValue4__ = reader.ReadSingle();
                                        continue;
                                }

                        }
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 3559921045566551378UL:
                                __RuneTag1__ = reader.ReadInt32();
                                continue;
                            case 3631978639604479314UL:
                                __RuneTag2__ = reader.ReadInt32();
                                continue;
                            case 3704036233642407250UL:
                                __RuneTag3__ = reader.ReadInt32();
                                continue;
                            case 3776093827680335186UL:
                                __RuneTag4__ = reader.ReadInt32();
                                continue;
                            case 3848151421718263122UL:
                                __RuneTag5__ = reader.ReadInt32();
                                continue;
                        }

                }
            }

            var ____result = new global::Data.RuneInfoData(__Seed__, __GroupSeed__, __NameIdx__, __DestIdx__, __RuneType1__, __RuneType2__, __RuneType3__, __RuneType4__, __RuneValue1__, __RuneValue2__, __RuneValue3__, __RuneValue4__, __RuneTag1__, __RuneTag2__, __RuneTag3__, __RuneTag4__, __RuneTag5__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SkillInfoDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.SkillInfoData>
    {
        // Seed
        private static global::System.ReadOnlySpan<byte> GetSpan_Seed() => new byte[1 + 4] { 164, 83, 101, 101, 100 };
        // SkillGroupSeed
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillGroupSeed() => new byte[1 + 14] { 174, 83, 107, 105, 108, 108, 71, 114, 111, 117, 112, 83, 101, 101, 100 };
        // NameIdx
        private static global::System.ReadOnlySpan<byte> GetSpan_NameIdx() => new byte[1 + 7] { 167, 78, 97, 109, 101, 73, 100, 120 };
        // DestIdx
        private static global::System.ReadOnlySpan<byte> GetSpan_DestIdx() => new byte[1 + 7] { 167, 68, 101, 115, 116, 73, 100, 120 };
        // Type
        private static global::System.ReadOnlySpan<byte> GetSpan_Type() => new byte[1 + 4] { 164, 84, 121, 112, 101 };
        // DetailType
        private static global::System.ReadOnlySpan<byte> GetSpan_DetailType() => new byte[1 + 10] { 170, 68, 101, 116, 97, 105, 108, 84, 121, 112, 101 };
        // ActivateType
        private static global::System.ReadOnlySpan<byte> GetSpan_ActivateType() => new byte[1 + 12] { 172, 65, 99, 116, 105, 118, 97, 116, 101, 84, 121, 112, 101 };
        // ActivateValue
        private static global::System.ReadOnlySpan<byte> GetSpan_ActivateValue() => new byte[1 + 13] { 173, 65, 99, 116, 105, 118, 97, 116, 101, 86, 97, 108, 117, 101 };
        // CoolTIme
        private static global::System.ReadOnlySpan<byte> GetSpan_CoolTIme() => new byte[1 + 8] { 168, 67, 111, 111, 108, 84, 73, 109, 101 };
        // TargetType
        private static global::System.ReadOnlySpan<byte> GetSpan_TargetType() => new byte[1 + 10] { 170, 84, 97, 114, 103, 101, 116, 84, 121, 112, 101 };
        // TargetValue
        private static global::System.ReadOnlySpan<byte> GetSpan_TargetValue() => new byte[1 + 11] { 171, 84, 97, 114, 103, 101, 116, 86, 97, 108, 117, 101 };
        // DamagePerType
        private static global::System.ReadOnlySpan<byte> GetSpan_DamagePerType() => new byte[1 + 13] { 173, 68, 97, 109, 97, 103, 101, 80, 101, 114, 84, 121, 112, 101 };
        // DamagePerValue
        private static global::System.ReadOnlySpan<byte> GetSpan_DamagePerValue() => new byte[1 + 14] { 174, 68, 97, 109, 97, 103, 101, 80, 101, 114, 86, 97, 108, 117, 101 };
        // EquipRuneCount
        private static global::System.ReadOnlySpan<byte> GetSpan_EquipRuneCount() => new byte[1 + 14] { 174, 69, 113, 117, 105, 112, 82, 117, 110, 101, 67, 111, 117, 110, 116 };
        // SkillTag1
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillTag1() => new byte[1 + 9] { 169, 83, 107, 105, 108, 108, 84, 97, 103, 49 };
        // SkillTag2
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillTag2() => new byte[1 + 9] { 169, 83, 107, 105, 108, 108, 84, 97, 103, 50 };
        // SkillTag3
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillTag3() => new byte[1 + 9] { 169, 83, 107, 105, 108, 108, 84, 97, 103, 51 };
        // SkillTag4
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillTag4() => new byte[1 + 9] { 169, 83, 107, 105, 108, 108, 84, 97, 103, 52 };
        // SkillTag5
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillTag5() => new byte[1 + 9] { 169, 83, 107, 105, 108, 108, 84, 97, 103, 53 };
        // EventNodePath
        private static global::System.ReadOnlySpan<byte> GetSpan_EventNodePath() => new byte[1 + 13] { 173, 69, 118, 101, 110, 116, 78, 111, 100, 101, 80, 97, 116, 104 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Data.SkillInfoData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(20);
            writer.WriteRaw(GetSpan_Seed());
            writer.Write(value.Seed);
            writer.WriteRaw(GetSpan_SkillGroupSeed());
            writer.Write(value.SkillGroupSeed);
            writer.WriteRaw(GetSpan_NameIdx());
            writer.Write(value.NameIdx);
            writer.WriteRaw(GetSpan_DestIdx());
            writer.Write(value.DestIdx);
            writer.WriteRaw(GetSpan_Type());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Type, options);
            writer.WriteRaw(GetSpan_DetailType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DetailType, options);
            writer.WriteRaw(GetSpan_ActivateType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.ActivateType, options);
            writer.WriteRaw(GetSpan_ActivateValue());
            writer.Write(value.ActivateValue);
            writer.WriteRaw(GetSpan_CoolTIme());
            writer.Write(value.CoolTIme);
            writer.WriteRaw(GetSpan_TargetType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.TargetType, options);
            writer.WriteRaw(GetSpan_TargetValue());
            writer.Write(value.TargetValue);
            writer.WriteRaw(GetSpan_DamagePerType());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.DamagePerType, options);
            writer.WriteRaw(GetSpan_DamagePerValue());
            writer.Write(value.DamagePerValue);
            writer.WriteRaw(GetSpan_EquipRuneCount());
            writer.Write(value.EquipRuneCount);
            writer.WriteRaw(GetSpan_SkillTag1());
            writer.Write(value.SkillTag1);
            writer.WriteRaw(GetSpan_SkillTag2());
            writer.Write(value.SkillTag2);
            writer.WriteRaw(GetSpan_SkillTag3());
            writer.Write(value.SkillTag3);
            writer.WriteRaw(GetSpan_SkillTag4());
            writer.Write(value.SkillTag4);
            writer.WriteRaw(GetSpan_SkillTag5());
            writer.Write(value.SkillTag5);
            writer.WriteRaw(GetSpan_EventNodePath());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.EventNodePath, options);
        }

        public global::Data.SkillInfoData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Seed__ = default(int);
            var __SkillGroupSeed__ = default(int);
            var __NameIdx__ = default(int);
            var __DestIdx__ = default(int);
            var __Type__ = default(string);
            var __DetailType__ = default(string);
            var __ActivateType__IsInitialized = false;
            var __ActivateType__ = default(string);
            var __ActivateValue__IsInitialized = false;
            var __ActivateValue__ = default(float);
            var __CoolTIme__ = default(float);
            var __TargetType__ = default(string);
            var __TargetValue__IsInitialized = false;
            var __TargetValue__ = default(int);
            var __DamagePerType__ = default(string);
            var __DamagePerValue__ = default(float);
            var __EquipRuneCount__ = default(int);
            var __SkillTag1__ = default(int);
            var __SkillTag2__ = default(int);
            var __SkillTag3__ = default(int);
            var __SkillTag4__ = default(int);
            var __SkillTag5__ = default(int);
            var __EventNodePath__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1684366675UL:
                                __Seed__ = reader.ReadInt32();
                                continue;
                            case 1701869908UL:
                                __Type__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 14:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8030559616555903827UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110386654441589UL) { goto FAIL; }

                                __SkillGroupSeed__ = reader.ReadInt32();
                                continue;

                            case 7300446490658169156UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 111555003897458UL) { goto FAIL; }

                                __DamagePerValue__ = reader.ReadSingle();
                                continue;

                            case 7959358559206338885UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 128017765450597UL) { goto FAIL; }

                                __EquipRuneCount__ = reader.ReadInt32();
                                continue;

                        }
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 33887263602336078UL:
                                __NameIdx__ = reader.ReadInt32();
                                continue;
                            case 33887263854388548UL:
                                __DestIdx__ = reader.ReadInt32();
                                continue;
                        }
                    case 10:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8742731976495359300UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25968UL) { goto FAIL; }

                                __DetailType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 8742740755509043540UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25968UL) { goto FAIL; }

                                __TargetType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ActivateType().Slice(1))) { goto FAIL; }

                        __ActivateType__IsInitialized = true;
                        __ActivateType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 13:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7310575256332428097UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435761733974UL) { goto FAIL; }

                                __ActivateValue__IsInitialized = true;
                                __ActivateValue__ = reader.ReadSingle();
                                continue;

                            case 7300446490658169156UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435678696562UL) { goto FAIL; }

                                __DamagePerType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7237089388182992453UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 448629133413UL) { goto FAIL; }

                                __EventNodePath__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7308578397237505859UL) { goto FAIL; }

                        __CoolTIme__ = reader.ReadSingle();
                        continue;
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_TargetValue().Slice(1))) { goto FAIL; }

                        __TargetValue__IsInitialized = true;
                        __TargetValue__ = reader.ReadInt32();
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7449328083299560275UL:
                                switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                                {
                                    default: goto FAIL;
                                    case 49UL:
                                        __SkillTag1__ = reader.ReadInt32();
                                        continue;
                                    case 50UL:
                                        __SkillTag2__ = reader.ReadInt32();
                                        continue;
                                    case 51UL:
                                        __SkillTag3__ = reader.ReadInt32();
                                        continue;
                                    case 52UL:
                                        __SkillTag4__ = reader.ReadInt32();
                                        continue;
                                    case 53UL:
                                        __SkillTag5__ = reader.ReadInt32();
                                        continue;
                                }

                        }

                }
            }

            var ____result = new global::Data.SkillInfoData(__Seed__, __SkillGroupSeed__, __Type__, __DetailType__, __NameIdx__, __DestIdx__, __CoolTIme__, __TargetType__, __DamagePerType__, __DamagePerValue__, __EquipRuneCount__, __SkillTag1__, __SkillTag2__, __SkillTag3__, __SkillTag4__, __SkillTag5__, __EventNodePath__);
            if (__ActivateType__IsInitialized)
            {
                ____result.ActivateType = __ActivateType__;
            }

            if (__ActivateValue__IsInitialized)
            {
                ____result.ActivateValue = __ActivateValue__;
            }

            if (__TargetValue__IsInitialized)
            {
                ____result.TargetValue = __TargetValue__;
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StringTextFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Data.StringText>
    {
        // Seed
        private static global::System.ReadOnlySpan<byte> GetSpan_Seed() => new byte[1 + 4] { 164, 83, 101, 101, 100 };
        // Kor
        private static global::System.ReadOnlySpan<byte> GetSpan_Kor() => new byte[1 + 3] { 163, 75, 111, 114 };
        // Eng
        private static global::System.ReadOnlySpan<byte> GetSpan_Eng() => new byte[1 + 3] { 163, 69, 110, 103 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Data.StringText value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Seed());
            writer.Write(value.Seed);
            writer.WriteRaw(GetSpan_Kor());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Kor, options);
            writer.WriteRaw(GetSpan_Eng());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Eng, options);
        }

        public global::Data.StringText Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Seed__ = default(int);
            var __Kor__ = default(string);
            var __Eng__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1684366675UL) { goto FAIL; }

                        __Seed__ = reader.ReadInt32();
                        continue;
                    case 3:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7499595UL:
                                __Kor__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 6778437UL:
                                __Eng__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }

                }
            }

            var ____result = new global::Data.StringText(__Seed__, __Kor__, __Eng__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

